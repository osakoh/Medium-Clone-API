#  NGINX will set the number of processes based on the number of CPUs automatically.
# worker_processes auto;

# ________________________________________________________________________________________________________
# location /staticfiles/ {
#     alias /app/staticfiles/;
# }

# with the alias directive, the location part is replaced by alias and as such the final path is just = alias.
# for example with the code block you submitted, for the alias directive, the final path would be /app/staticfiles .
# As you can see with the alias directive, the location /staticfiles/ gets dropped from the final path,
# but with the root path, the additional /staticfiles path is added to the final path.
# ________________________________________________________________________________________________________


# ________________________________________________________________________________________________________
# location /staticfiles/ {
#     root /app/staticfiles/;
# }

# With the root directive, the location part is appended to root such that a
# final path would be something like root + location. for example, with the code block you submitted,
# for the root directive, the final path would be /app/staticfiles/staticfiles
# ________________________________________________________________________________________________________


# upstream: NGINX is a collection of servers that can be treated as a single backend.
# i.e. defines a group of servers which can listen on different ports
upstream api {
    server api:8000;
}

server {
    client_max_body_size 20M;
    listen 80;

    # prefix match: tells NGINX to match any URI starting with "/api/v1"
    location /api/v1 {
        # proxy_pass directive: passes a client's request to a third party server and reverse proxies the response to the client.
        proxy_pass http://api;
        # proxy_set_header directive: used for setting a header on the back-end server. proxy_set_header <header name> <header value>
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        # proxy_redirect directive: only involved with changing the Location response header in a 3xx status message
        proxy_redirect off;
    }

    # superuser URI: /controller
    location /controller {
        # proxy_pass directive: passes a client's request to a third party server and reverse proxies the response to the client.
        proxy_pass http://api;
        # proxy_set_header directive: used for setting a header on the back-end server. proxy_set_header <header name> <header value>
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        # proxy_redirect directive: only involved with changing the Location response header in a 3xx status message
        proxy_redirect off;
    }

    # API documentaion: /read-docs
    location /read-docs {
        # proxy_pass directive: passes a client's request to a third party server and reverse proxies the response to the client.
        proxy_pass http://api;
        # proxy_set_header directive: used for setting a header on the back-end server. proxy_set_header <header name> <header value>
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        # proxy_redirect directive: only involved with changing the Location response header in a 3xx status message
        proxy_redirect off;
    }

    # staticfiles: defined in base.py script as STATIC_URL
    location /staticfiles/ {
        alias /app/staticfiles/;
    }

    # mediafiles: defined in base.py script as MEDIA_URL
    location /mediafiles/ {
        alias /app/mediafiles/;
    }
}