#!/usr/bin/env bash

# exist script if any command fails
set -o errexit
# exist script if any pipe command fails
set -o pipefail
# exist script if any variable is not set
set -o nounset

# set working directory
working_dir="$(dirname ${0})"

# source command reads and executes commands from the file specified as its argument in the current shell environment.
# It is useful to load functions, variables, and configuration files into shell scripts.
source "${working_dir}/_sourced/constants.sh"

# source command reads and executes commands from the file specified as its argument in the current shell environment.
# It is useful to load functions, variables, and configuration files into shell scripts.
source "${working_dir}/_sourced/messages.sh"

# pass the argument(text) into the message_welcome function sourced from 'messages.sh'
message_welcome "***************** Backing up the '${POSTGRES_DB}' database *****************"

# conditional to ensure user isn't the default postgres user
if [[ "${POSTGRES_USER}" == "postgres" ]]; then
  message_error "Backing up as 'postgres' user is not allowed. Assign 'POSTGRES_USER' env with another user and try again"
  exit 1 # General errors
fi

# export variables
export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

# declare backup file name
backup_filename="${BACKUP_FILE_PREFIX}_$(date +'%Y_%m_%dT%H_%M_%S').sql.gz"

# SQL Dump - postgres command to backup db, gzip & specify location to store backups
# syntax: pg_dump dbname > outfile
pg_dump | gzip > "${BACKUP_DIR_PATH}/${backup_filename}"

# if backup was succesful
# pass the argument(text) into the message_success function sourced from 'messages.sh'
message_success "'${POSTGRES_DB}' database backup '${backup_filename}' has been created and placed in '${BACKUP_DIR_PATH}'."
